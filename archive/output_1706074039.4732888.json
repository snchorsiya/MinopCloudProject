{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 9}, "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_admin_dashboard>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_admin_dashboard", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_admin_login_invalid_username>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_admin_login_invalid_username", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_admin_login_invalid_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_admin_login_invalid_password", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_admin_login_blank_username>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_admin_login_blank_username", "rerun": "0"}, "4": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_admin_login_blank_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_admin_login_blank_password", "rerun": "0"}, "5": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_admin_login_blank_username_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_admin_login_blank_username_password", "rerun": "0"}, "6": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_checkbox_checked>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_checkbox_checked", "rerun": "0"}, "7": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_checkbox_unchecked>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_checkbox_unchecked", "rerun": "0"}, "8": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_forget_password_page>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_forget_password_page", "rerun": "0"}}, "suite_name": "testCaes/test_admin_login_page_testcase.py"}, "1": {"suite_name": "testCaes/test_employee_login_page_testcase.py", "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_employee_dashboard>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_employee_dashboard", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_invalid_username>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_invalid_username", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_invalid_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_invalid_password", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_blank_username>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_blank_username", "rerun": "0"}, "4": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_blank_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_blank_password", "rerun": "0"}, "5": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_blank_username_password>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_blank_username_password", "rerun": "0"}, "6": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_blank_companyCode>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_blank_companyCode", "rerun": "0"}, "7": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_employee_login_invalid_companyCode>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_employee_login_invalid_companyCode", "rerun": "0"}, "8": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_emp_forget_password_page>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_emp_forget_password_page", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 9}}, "2": {"suite_name": "testCaes/test_index_page_testcase.py", "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x0000024B56AA5C10>, name = 'browser_name', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browser_name'\n\nC:\\Users\\Sheetal.Chorsiya\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\config\\__init__.py:1611: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_login_page>>\n\n    @pytest.fixture()\n    def setup(request):\n        global driver\n>       browser_name = request.config.getoption(\"browser_name\")\nE       ValueError: no option named 'browser_name'\n\ntestCaes\\conftest.py:11: ValueError\n", "test_name": "test_verify_login_page", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}}}, "date": "January 24, 2024", "start_time": 1706073689.2328212, "total_suite": 3, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "19", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "19"}